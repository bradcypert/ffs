module.exports = {"version":3,"file":"main.js","sources":["../src/TaskQueue.ts","../src/constants/Constants.ts","../src/Kernel.ts","../src/tasks/task.ts","../src/tasks/creep/Build.ts","../src/tasks/creep/Freight.ts","../src/tasks/creep/Mine.ts","../src/Scheduler.ts","../src/main.ts"],"sourcesContent":["import Task from './tasks/Task';\n\n/**\n * The task queue is a simple buffer for running tasks.\n * The kernel operates on values in the queue based on remaining CPU availability\n * and the Scheduler populates the queue based off the state of the game.\n */\nexport default class TaskQueue {\n    private static queue: Task[] = [];\n\n    /**\n     * Add a new task to the queue.\n     * @param {Task} task\n     */\n    public static add(task: Task) {\n        if (task) {\n            this.queue.push(task);\n        }\n    }\n\n    public static hasTasks(): boolean {\n        return this.queue.length > 0;\n    }\n\n    /**\n     * Get and remove the next task from the queue.\n     * Might be useful for deferring execution of high CPU tasks.\n     */\n    public static pop(): Task | undefined {\n        return this.queue.shift();\n    }\n\n    public static peek(): Task | null {\n        return this.queue[0];\n    }\n\n    /**\n     * Process the next task in the queue.\n     */\n    public static process() {\n        const task = this.pop();\n        if (task) {\n            task.run();\n        } else {\n            console.log('Trying to process an empty queue. Error code: QUAILHOUND');\n        }\n    }\n}\n","export default {\n    CONSTRUCTION_POINTS_PER_BUILDER: 10,\n    CONSTRUCTION_POINT_TTL: 100,\n    CPU_ADJUST: 0.05,\n    CPU_BOOST: 0,\n    CPU_BUFFER: 100,\n    CPU_MINIMUM: 0.30,\n    SOURCE_POINT_TTL: 100\n};\n","import TaskQueue from 'TaskQueue';\nimport Constants from './constants/Constants';\n\nexport default class Kernel {\n  public static tick() {\n      while (TaskQueue.hasTasks()\n            && this.CPUAvailable()) {\n          TaskQueue.process();\n      }\n  }\n\n  private static CPUAvailable(): boolean {\n      const cpuUsed = Game.cpu.getUsed();\n      const cpuLimit = Game.cpu.limit;\n      return (cpuLimit - (Constants.CPU_BUFFER * Constants.CPU_ADJUST) > cpuUsed);\n  }\n}\n","export default abstract class Task {\n    public abstract type: string;\n    public abstract id: string;\n    public abstract run(): void;\n}\n","import Task from '../task';\n\n/**\n * This task is assigned to creeps that will build / upgrade\n */\nexport default class Build extends Task {\n    public type: string = 'build';\n    public id: string;\n    public creep: Creep;\n    public targets: Array<ConstructionSite<BuildableStructureConstant>>;\n\n    constructor(id: string, creep: Creep) {\n        super();\n        this.id = id;\n        this.creep = creep;\n        this.targets = [];\n    }\n\n    public run(): void {\n        // TODO: This is expensive, defer or cache this please.\n        this.targets = this.creep.room.find(FIND_CONSTRUCTION_SITES);\n        const status = (this.creep.memory as any).status;\n        if (status !== 'gathering' && this.creep.carry.energy === 0) {\n            (this.creep.memory as any).status = 'gathering';\n        } else if (status !== 'building' && this.creep.carry.energy === this.creep.carryCapacity) {\n            (this.creep.memory as any).status = 'building';\n        }\n        if ((this.creep.memory as any).status === 'gathering') {\n            this.collectEnergy();\n        } else {\n            if (this.targets.length > 0) {\n                this.goToConstructionSite();\n            } else {\n                this.upgradeController();\n            }\n        }\n    }\n\n    public collectEnergy(): void {\n        const dropoff = this.creep.room.find(FIND_STRUCTURES).filter(s =>\n            s.structureType === STRUCTURE_CONTAINER\n            && s.store.energy > this.creep.carryCapacity);\n\n        if (dropoff.length > 0) {\n            if (this.creep.withdraw(dropoff[0], RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(dropoff[0], {visualizePathStyle: {stroke: '#0000FF'}});\n            }\n        } else {\n            // Manually Harvest it\n            const target = this.creep.room.find(FIND_SOURCES).pop();\n            if (target && this.creep.harvest(target) === ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(target,  {visualizePathStyle: {stroke: '#ffff33'}});\n            }\n        }\n    }\n\n    public upgradeController(): void {\n        const controller = this.creep.room.find(FIND_STRUCTURES).filter(s => s.structureType === STRUCTURE_CONTROLLER);\n        if (controller[0]) {\n            if (this.creep.upgradeController(controller[0] as StructureController) === ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(controller[0], {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        }\n    }\n\n    public goToConstructionSite(): void {\n        const targets = this.targets.filter((s) => s.progress < s.progressTotal);\n        if (targets.length > 0) {\n            if (this.creep.build(targets[0]) === ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#000099'}});\n            }\n        }\n    }\n\n}\n","import Task from '../task';\n\n/**\n * This task is assigned to creeps that transfer from containers to the spawn.\n */\nexport default class Freight extends Task {\n    public type: string = 'freight';\n    public id: string;\n    public creep: Creep;\n    public targets: any[];\n\n    constructor(id: string, creep: Creep) {\n        super();\n        this.id = id;\n        this.creep = creep;\n        this.targets = creep.room.find(FIND_STRUCTURES).filter(s => s.structureType === STRUCTURE_CONTAINER);\n    }\n\n    public run(): void {\n        if (this.creep.carry.energy < this.creep.carryCapacity) {\n            this.collectEnergy();\n        } else {\n           this.dropOffEnergy();\n        }\n    }\n\n    public collectEnergy(): void {\n        /** no op */\n    }\n\n    public dropOffEnergy(): void {\n        /** no op */\n    }\n}\n","import Task from '../task';\n\n/**\n * This task is assigned to the creeps that will mine energy.\n */\nexport default class Mine extends Task {\n    public type: string = 'mine';\n    public id: string;\n    public creep: Creep;\n    public targets: Source[];\n\n    constructor(id: string, creep: Creep) {\n        super();\n        this.id = id;\n        this.creep = creep;\n        this.targets = creep.room.find(FIND_SOURCES);\n    }\n\n    public run(): void {\n\n        const status = (this.creep.memory as any).status;\n        if (status !== 'gathering' && this.creep.carry.energy === 0) {\n            (this.creep.memory as any).status = 'gathering';\n        } else if (status !== 'depositing' && this.creep.carry.energy === this.creep.carryCapacity) {\n            (this.creep.memory as any).status = 'depositing';\n        }\n\n        if ((this.creep.memory as any).status === 'gathering') {\n            this.collectEnergy();\n        } else {\n            this.dropOffEnergy();\n        }\n    }\n\n    public collectEnergy(): void {\n        // TODO: Determine which source to hit.\n        // Can leverage Memory.source.$sourceID to see how many it can handle\n        // will need to associate the creep with that source in memory as well\n        // then find the applicable source from memory and direct to it\n        if (!(this.creep.memory as any).target) {\n            const target = this.targets.sort((a, b) => {\n                const aa = Memory['source'][a.id]['points'] + Memory['source'][a.id]['creeps'].length;\n                const bb = Memory['source'][b.id]['points'] + Memory['source'][b.id]['creeps'].length;\n                if (aa === bb) { return 0; }\n                if (aa < bb) { return -1; } else { return 1; }\n            })[0];\n\n            if (target) {\n                (this.creep.memory as any).target = target;\n                Memory['source'][target.id]['creeps'].push(this.creep);\n            }\n        }\n\n        const target = Game.getObjectById((this.creep.memory as any).target.id) as Source;\n        if (target && this.creep.harvest(target) === ERR_NOT_IN_RANGE) {\n            this.creep.moveTo(target,  {visualizePathStyle: {stroke: '#ffff33'}});\n        }\n    }\n\n    public dropOffEnergy(): void {\n        const dropoff = this.creep.room.find(FIND_STRUCTURES).filter(s =>\n        (s.structureType === STRUCTURE_CONTAINER && s.store.energy < s.storeCapacity)\n        ||  (s.structureType === STRUCTURE_SPAWN && s.energy < s.energyCapacity)\n        ||  (s.structureType === STRUCTURE_EXTENSION && s.energy < s.energyCapacity));\n\n        if (dropoff.length > 0) {\n            if (this.creep.transfer(dropoff[0], RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(dropoff[0], {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        } else {\n            // Controllers are unique\n            const controller = this.creep.room.find(FIND_STRUCTURES)\n                .filter(s => s.structureType === STRUCTURE_CONTROLLER);\n            if (controller[0]) {\n                if (this.creep.upgradeController(controller[0] as StructureController) === ERR_NOT_IN_RANGE) {\n                    this.creep.moveTo(controller[0], {visualizePathStyle: {stroke: '#ffffff'}});\n                }\n            }\n        }\n    }\n\n}\n","// The scheduler decides what needs to happen and then creates tasks for it.\nimport _ from 'lodash';\nimport Build from 'tasks/creep/Build';\nimport Freight from 'tasks/creep/Freight';\nimport Mine from 'tasks/creep/Mine';\nimport Constants from './constants/Constants';\nimport TaskQueue from './TaskQueue';\n\nexport default class Scheduler {\n    public static getRooms(): {[p: string]: Room} {\n        return Game.rooms;\n    }\n\n    public static createSchedule() {\n        const rooms = _.values(this.getRooms());\n\n        _.forEach(rooms, (room: Room) => {\n            this.determineWorkload(room);\n            this.delegateCreeps(room);\n        });\n    }\n\n    private static determineWorkload(room: Room) {\n        const CIR = Scheduler.getCreepsInRoom(room);\n        const workersInRoom = CIR\n            .filter(c => (c.memory as any).task === 'worker').length;\n\n        const constructionPoints = Scheduler.getConstructionPoints(room).length;\n        const buildersInRoom = CIR\n            .filter(c => (c.memory as any).task === 'builder').length;\n\n        if (constructionPoints / Constants.CONSTRUCTION_POINTS_PER_BUILDER > buildersInRoom) {\n            this.requisitionCreep('builder', room);\n        }\n\n        const sources = room.find(FIND_SOURCES);\n        const unworkedSourcePoints = sources\n            .map(Scheduler.getUnusedSourcePoints)\n            .map(e => e.points)\n            .reduce((acc, val) => acc + val, 0);\n\n        if (unworkedSourcePoints > workersInRoom - sources.length) {\n            this.requisitionCreep('worker', room);\n        }\n    }\n\n    private static getConstructionPoints(room: Room) {\n        return room.find(FIND_MY_CONSTRUCTION_SITES);\n    }\n\n    private static getUnusedSourcePoints(source: Source) {\n        if (!Memory['source'][source.id]) {\n          const x = source.pos.x;\n          const y = source.pos.y;\n          const room = source.pos.roomName;\n\n          // The total number of adjacent available points.\n          const points = Array.from({ length: 9 }, (_, i) => {\n            // TODO: move this into a util and do a for loop, incrementing a counter\n            // delta(x) (col) given by getting the modulus of the max, and then subtracting the middle\n            // delta(y) (row) given by dividing by the max, and then subtracting the middle.\n            const xd = i % 3 - 1;\n            const yd = Math.floor(i / 3 - 1);\n            return Game.map.getTerrainAt(x + xd, y - yd, room);\n          }).filter(_ => _ !== 'wall').length;\n\n          Memory['source'][source.id] = {\n            creeps: [],\n            points\n          };\n        }\n        return Memory['source'][source.id];\n    }\n\n    private static delegateCreeps(room: Room) {\n        const creeps = this.getCreepsInRoom(room);\n\n        _.forEach(creeps, (creep: Creep) => {\n            const memory = creep.memory;\n            if (!memory.hasOwnProperty('task')) {\n                (creep.memory as any).task = this.assignTaskByBodyParts(creep);\n            }\n\n            switch ((creep.memory as any).task) {\n                case 'hauler':\n                    TaskQueue.add(new Freight('0', creep));\n                    break;\n                case 'worker':\n                    TaskQueue.add(new Mine('0', creep));\n                    break;\n                case 'builder':\n                    TaskQueue.add(new Build('0', creep));\n                    break;\n                default:\n                    console.log(`No valid task found for ${creep.id}`);\n                    break;\n            }\n        });\n    }\n\n    private static getCreepsInRoom(room: Room): Creep[] {\n        return (_.values(Game.creeps) as Creep[]).filter((c) => c.room.name === room.name);\n    }\n\n    private static taskMap = {\n        attack: 'soldier',\n        carry: 'hauler',\n        heal: 'medic',\n        move: 'builder',\n        ranged_attack: 'soldier',\n        work: 'worker'\n    };\n\n    private static assignTaskByBodyParts(creep: Creep) {\n        const counts = _.reduce(creep.body, (acc: any, val) => {\n            acc[val.type] = (acc[val.type] || 0) + 1;\n            return acc;\n        }, {});\n        delete counts.tough;\n        const keysSorted = Object.keys(counts).sort((a, b) => counts[a] - counts[b]);\n        return (this.taskMap as any)[keysSorted[0]];\n    }\n\n    private static partMap = {\n        builder: [MOVE, WORK, CARRY],\n        hauler: [MOVE, CARRY, CARRY],\n        worker: [MOVE, WORK, CARRY]\n    };\n    private static requisitionCreep(type: string, room: Room) {\n        const parts = (this.partMap as any)[type];\n        const spawner = room.find(FIND_MY_SPAWNS)\n            .filter((s) => s.spawnCreep(parts, '', {dryRun: true}) && !s.spawning)[0];\n        if (spawner) {\n            spawner.spawnCreep(parts, type + new Date().getUTCMilliseconds(), {memory: {task: type}});\n        }\n    }\n}\n","// When compiling TS to JS and bundling with rollup, the line numbers and file names in error messages change\n// This utility uses source maps to get the line numbers and file names of the original, TS source code\nimport Kernel from 'Kernel';\nimport Scheduler from 'Scheduler';\n\nif (!Memory['source']) { Memory['source'] = {}; }\n\nexport const loop = () => {\n  console.log(`Current game tick is ${Game.time}`);\n\n  // should be moved into the source identification process\n  if (Game.time % 25 === 0) {\n    Memory['source'] = {};\n  }\n\n  // Automatically delete memory of missing creeps\n  for (const name in Memory.creeps) {\n    if (!(name in Game.creeps)) {\n      delete Memory.creeps[name];\n    }\n  }\n\n  Scheduler.createSchedule();\n  Kernel.tick();\n};\n"],"names":["_"],"mappings":"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"};