module.exports = {"version":3,"file":"main.js","sources":["../src/Main.ts","../src/TaskQueue.ts","../src/tasks/task.ts","../src/tasks/creep/Build.ts","../src/tasks/creep/Freight.ts","../src/constants/index.ts","../src/tasks/creep/Mine.ts","../src/Scheduler.ts","../src/Kernel.ts","../src/main.ts"],"sourcesContent":["export default {\n    SOURCE_POINT_TTL: 100,\n    CONSTRUCTION_POINT_TTL: 100,\n    CONSTRUCTION_POINTS_PER_BUILDER: 10,\n    CPU_BUFFER: 100,\n    CPU_MINIMUM: 0.30,\n    CPU_ADJUST: 0.05,\n    CPU_BOOST: 0,\n\n\n}","import Task from './tasks/Task';\n\n/**\n * The task queue is a simple buffer for running tasks.\n * The kernel operates on values in the queue based on remaining CPU availability\n * and the Scheduler populates the queue based off the state of the game.\n */\nexport default class TaskQueue {\n    private static queue: Task[] = [];\n\n    /**\n     * Add a new task to the queue.\n     * @param {Task} task\n     */\n    public static add(task: Task) {\n        if (task) {\n            this.queue.push(task);\n        }\n    }\n\n    public static hasTasks(): boolean {\n        return this.queue.length > 0;\n    }\n\n    /**\n     * Get and remove the next task from the queue.\n     * Might be useful for deferring execution of high CPU tasks.\n     */\n    public static pop(): Task | undefined {\n        return this.queue.shift();\n    }\n\n    public static peek(): Task | null {\n        return this.queue[0];\n    }\n\n    /**\n     * Process the next task in the queue.\n     */\n    public static process() {\n        const task = this.pop();\n        if (task) {\n            task.run();\n        } else {\n            console.log(\"Trying to process an empty queue. Error code: QUAILHOUND\");\n        }\n    }\n}","export default abstract class Task {\n    abstract type: string;\n    abstract id: string;\n    abstract run(): void;\n}","import Task from '../task';\n\n/** \n * This task is assigned to creeps that will build / upgrade\n*/\nexport default class Build extends Task {\n    type: string = 'build';\n    id: string;\n    creep: Creep;\n    targets: ConstructionSite<BuildableStructureConstant>[];\n\n    constructor(id: string, creep: Creep) {\n        super();\n        this.id = id;\n        this.creep = creep;\n        this.targets = [];\n    }\n\n    run(): void {\n        // TODO: This is expensive, defer or cache this please.\n        this.targets = this.creep.room.find(FIND_CONSTRUCTION_SITES);\n        const status = (<any>this.creep.memory).status;\n        if (status !== 'gathering' && this.creep.carry.energy === 0) { \n            (<any>this.creep.memory).status = 'gathering';\n        } else if (status !== 'building' && this.creep.carry.energy === this.creep.carryCapacity) {\n            (<any>this.creep.memory).status = 'building';\n        }\n        if ((<any>this.creep.memory).status === 'gathering') {\n            this.collectEnergy();\n        } else {\n            if (this.targets.length > 0) {\n                this.goToConstructionSite();\n            } else {\n                this.upgradeController();\n            }\n        }\n    }\n\n\n    collectEnergy(): void {\n        const dropoff = this.creep.room.find(FIND_STRUCTURES).filter(s => \n            s.structureType === STRUCTURE_CONTAINER\n            && s.store.energy > this.creep.carryCapacity);\n\n        if (dropoff.length > 0) {\n            if(this.creep.withdraw(dropoff[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(dropoff[0], {visualizePathStyle: {stroke: '#0000FF'}});\n            }\n        } else {\n            // Manually Harvest it\n            const target = this.creep.room.find(FIND_SOURCES).pop();\n            if(target && this.creep.harvest(target) == ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(target,  {visualizePathStyle: {stroke: '#ffff33'}});\n            }\n        }\n    }\n\n    upgradeController(): void {\n        const controller = this.creep.room.find(FIND_STRUCTURES).filter(s => s.structureType === STRUCTURE_CONTROLLER);\n        if (controller[0]) {\n            if (this.creep.upgradeController(<StructureController>controller[0]) == ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(controller[0], {visualizePathStyle: {stroke: '#ffffff'}});\n            }\n        }\n    }\n\n    goToConstructionSite(): void {\n        const targets = this.targets.filter((s) => s.progress < s.progressTotal);\n        if (targets.length > 0) {\n            if(this.creep.build(targets[0]) == ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#000099'}})\n            }\n        }\n    }\n\n}","import Task from '../task';\n\n/**\n * This task is assigned to creeps that transfer from containers to the spawn.\n */\nexport default class Freight extends Task {\n    type: string = 'freight';\n    id: string;\n    creep: Creep;\n    targets: any[];\n\n    constructor(id: string, creep: Creep) {\n        super();\n        this.id = id;\n        this.creep = creep;\n        this.targets = creep.room.find(FIND_STRUCTURES).filter(s => s.structureType === STRUCTURE_CONTAINER);\n    }\n\n    run(): void {\n        if (this.creep.carry.energy < this.creep.carryCapacity) {\n            this.collectEnergy();\n        } else {\n           this.dropOffEnergy();\n        }\n    }\n\n    collectEnergy(): void {\n\n    }\n\n    dropOffEnergy(): void {\n\n    }\n}\n","export const Colors = {\n    LIGHT_YELLOW: '#ffff33',\n    WHITE: '#ffffff',\n};\n\nexport const PathStyles = {\n    GATHERING_SOURCE: {\n        visualizePathStyle: {\n            stroke: Colors.LIGHT_YELLOW,\n        },\n    },\n    UPGRADING: {\n        visualizePathStyle: {\n            stroke: Colors.WHITE,\n        },\n    },\n};\n","import { PathStyles } from 'constants/index';\nimport Task from '../task';\n\n/**\n * This task is assigned to the creeps that will mine energy.\n */\nexport default class Mine extends Task {\n    type: string = 'mine';\n    id: string;\n    creep: Creep;\n    targets: Source[];\n\n    constructor(id: string, creep: Creep) {\n        super();\n        this.id = id;\n        this.creep = creep;\n        this.targets = creep.room.find(FIND_SOURCES);\n    }\n\n    run(): void {\n        const status = (<any>this.creep.memory).status;\n        if (status !== 'gathering' && this.creep.carry.energy === 0) {\n            (<any>this.creep.memory).status = 'gathering';\n            (<any>this.creep.memory).target = null;\n        } else if (status !== 'depositing' && this.creep.carry.energy === this.creep.carryCapacity) {\n            (<any>this.creep.memory).status = 'depositing';\n            (<any>this.creep.memory).target = null;\n        }\n\n        if ((<any>this.creep.memory).status === 'gathering') {\n            this.collectEnergy();\n        } else {\n            this.dropOffEnergy();\n        }\n    }\n\n    collectEnergy(): void {\n        // TODO: Determine which source to hit.\n        // Can leverage Memory.source.$sourceID to see how many it can handle\n        // will need to associate the creep with that source in memory as well\n        // then find the applicable source from memory and direct to it\n        const creepMem: any = <any>this.creep.memory;\n\n        if (!creepMem.target) {\n            const target = this.creep.pos.findClosestByPath(FIND_SOURCES, {\n                filter(source) {\n                    const available = Memory['source'][source.id]['points'] - Memory['source'][source.id]['creeps'].length;\n                    return available > 0;\n                },\n            });\n\n            if (target) {\n                (<any>this.creep.memory).target = target;\n                Memory['source'][target.id]['creeps'].push(this.creep);\n            }\n        }\n\n        const target = <Source>Game.getObjectById((<any>this.creep.memory).target.id);\n        if(target && this.creep.harvest(target) == ERR_NOT_IN_RANGE) {\n            this.creep.moveTo(target, PathStyles.GATHERING_SOURCE);\n        }\n    }\n\n    dropOffEnergy(): void {\n        const dropoff = this.creep.room.find(FIND_STRUCTURES, {\n            filter: s =>\n                (s.structureType === STRUCTURE_CONTAINER && s.store.energy < s.storeCapacity)\n                || (s.structureType === STRUCTURE_SPAWN && s.energy < s.energyCapacity)\n                || (s.structureType === STRUCTURE_EXTENSION && s.energy < s.energyCapacity),\n        });\n\n        if (dropoff.length > 0) {\n            if(this.creep.transfer(dropoff[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\n                this.creep.moveTo(dropoff[0], PathStyles.UPGRADING);\n            }\n        } else {\n            // Controllers are unique\n            const controller = this.creep.room.find(FIND_STRUCTURES).filter(s => s.structureType === STRUCTURE_CONTROLLER);\n            if (controller[0]) {\n                if (this.creep.upgradeController(<StructureController>controller[0]) == ERR_NOT_IN_RANGE) {\n                    this.creep.moveTo(controller[0], PathStyles.UPGRADING);\n                }\n            }\n        }\n    }\n\n}","// The scheduler decides what needs to happen and then creates tasks for it.\nimport Constants from './Constants';\nimport TaskQueue from './TaskQueue';\n\nimport Build from 'tasks/creep/Build';\nimport Freight from 'tasks/creep/Freight';\nimport Mine from 'tasks/creep/Mine';\n\nexport default class Scheduler {\n    static getRooms(): {[p: string] : Room} {\n        return Game.rooms;\n    }\n\n    static createSchedule() {\n        let rooms = _.values(this.getRooms());\n\n        _.forEach(rooms, (room: Room) => {\n            this.determineWorkload(room);\n            this.delegateCreeps(room);\n        });\n    }\n\n    static determineWorkload(room: Room) {\n        \n\n        const CIR = Scheduler.getCreepsInRoom(room);\n        const workersInRoom = CIR\n            .filter(c => (<any>c.memory).task === 'worker').length;\n\n        const constructionPoints = Scheduler.getConstructionPoints(room).length;\n        const buildersInRoom = CIR\n            .filter(c => (<any>c.memory).task === 'builder').length;\n\n        if (constructionPoints / Constants.CONSTRUCTION_POINTS_PER_BUILDER > buildersInRoom) {\n            this.requisitionCreep('builder', room);\n        }\n\n        const sources = room.find(FIND_SOURCES);\n        const unworkedSourcePoints = sources\n            .map(Scheduler.getUnusedSourcePoints)\n            .map(e => e.points)\n            .reduce((acc, val) => acc + val, 0);\n\n        if (unworkedSourcePoints > workersInRoom - sources.length) {\n            this.requisitionCreep('worker', room);\n        }\n    }\n\n    static getConstructionPoints(room: Room) {\n        return room.find(FIND_MY_CONSTRUCTION_SITES);\n    }\n\n    static getUnusedSourcePoints(source: Source) {\n        if (!Memory['source'][source.id]) {\n            const x = source.pos.x;\n            const y = source.pos.y;\n            const room = source.pos.roomName;\n\n            // The total number of adjacent available points.\n            const points = Array.from({ length: 9 }, (_, i) => {\n                // TODO: move this into a util and do a for loop, incrementing a counter\n                // delta(x) (col) given by getting the modulus of the max, and then subtracting the middle\n                // delta(y) (row) given by dividing by the max, and then subtracting the middle.\n                const xd = i % 3 - 1;\n                const yd = Math.floor(i / 3 - 1);\n                return Game.map.getTerrainAt(x + xd, y - yd, room);\n            }).filter(_ => _ !== 'wall').length;\n\n            Memory['source'][source.id] = {\n                creeps: [],\n                points,\n            };\n        }\n        return Memory['source'][source.id];\n    }\n\n    static delegateCreeps(room: Room) {\n        let creeps = this.getCreepsInRoom(room);\n\n        _.forEach(creeps, (creep: Creep) => {\n            let memory = creep.memory;\n            if (!memory.hasOwnProperty('task')) {\n                (<any>creep.memory).task = this.assignTaskByBodyParts(creep);\n            }\n\n            switch ((<any>creep.memory).task) {\n                case 'hauler':\n                    TaskQueue.add(new Freight('0', creep));\n                    break;\n                case 'worker':\n                    TaskQueue.add(new Mine('0', creep));\n                    break;\n                case 'builder':\n                    TaskQueue.add(new Build('0', creep));\n                    break;\n            }\n        });\n    }\n\n    static getCreepsInRoom(room: Room): Creep[] {\n        return (<Creep[]>_.values(Game.creeps)).filter((c) => c.room.name === room.name);\n    }\n\n    static taskMap = {\n        'carry': 'hauler',\n        'move': 'builder',\n        'work': 'worker',\n        'attack': 'soldier',\n        'ranged_attack': 'soldier',\n        'heal': 'medic'\n    };\n\n    static assignTaskByBodyParts(creep: Creep) {\n        let counts = _.reduce(creep.body, (acc: any, val) => {\n            acc[val.type] = (acc[val.type] || 0) + 1;\n            return acc;\n        }, {});\n        delete counts.tough;\n        let keysSorted = Object.keys(counts).sort(function(a,b){return counts[a]-counts[b]});\n        return (<any>this.taskMap)[keysSorted[0]];\n    }\n\n    static partMap = {\n        'hauler': [MOVE, CARRY, CARRY],\n        'builder': [MOVE, WORK, CARRY],\n        'worker': [MOVE, WORK, CARRY]\n    };\n    static requisitionCreep(type: string, room: Room) {\n        const parts = (<any>this.partMap)[type];\n        const spawner = room.find(FIND_MY_SPAWNS)\n            .filter((s) => s.spawnCreep(parts, '', {dryRun: true}) && !s.spawning)[0];\n        if (spawner) {\n            spawner.spawnCreep(parts, type+new Date().getUTCMilliseconds(), {memory: {task: type}});\n        }\n    }\n}","import TaskQueue from 'TaskQueue';\nimport Constants from './Constants';\n\nexport default class Kernel {\n  public static tick() {\n      while(TaskQueue.hasTasks()\n            && this.CPUAvailable()) {\n          TaskQueue.process();\n      }\n  }\n\n  private static CPUAvailable(): boolean {\n      const cpuUsed = Game.cpu.getUsed();\n      const cpuLimit = Game.cpu.limit;\n      return (cpuLimit - (Constants.CPU_BUFFER * Constants.CPU_ADJUST) > cpuUsed);\n  }\n}","// When compiling TS to JS and bundling with rollup, the line numbers and file names in error messages change\n// This utility uses source maps to get the line numbers and file names of the original, TS source code\nimport Scheduler from 'Scheduler';\nimport Kernel from 'Kernel';\n\nif (!Memory['source']) Memory['source'] = {};\n\nexport const loop = () => {\n  console.log(`Current game tick is ${Game.time}`);\n\n  // should be moved into the source identification process\n  if (Game.time % 25 === 0) {\n    Memory['source'] = {};\n  }\n\n  // Automatically delete memory of missing creeps\n  for (const name in Memory.creeps) {\n    if (!(name in Game.creeps)) {\n      delete Memory.creeps[name];\n    }\n  }\n\n  Scheduler.createSchedule();\n  Kernel.tick();\n};\n"],"names":[],"mappings":";;;;AAAA,gBAAe;IACX,gBAAgB,EAAE,GAAG;IACrB,sBAAsB,EAAE,GAAG;IAC3B,+BAA+B,EAAE,EAAE;IACnC,UAAU,EAAE,GAAG;IACf,WAAW,EAAE,IAAI;IACjB,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,CAAC;CAGf,CAAA;;;ACRD;;;;;AAKA;;;;;IAOW,OAAO,GAAG,CAAC,IAAU;QACxB,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACzB;KACJ;IAEM,OAAO,QAAQ;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;KAChC;;;;;IAMM,OAAO,GAAG;QACb,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;KAC7B;IAEM,OAAO,IAAI;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACxB;;;;IAKM,OAAO,OAAO;QACjB,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACxB,IAAI,IAAI,EAAE;YACN,IAAI,CAAC,GAAG,EAAE,CAAC;SACd;aAAM;YACH,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;SAC3E;KACJ;;AAtCc,eAAK,GAAW,EAAE,CAAC;;;;CCJrC;;;WCC0B,SAAQ,IAAI;IAMnC,YAAY,EAAU,EAAE,KAAY;QAChC,KAAK,EAAE,CAAC;QANZ,SAAI,GAAW,OAAO,CAAC;QAOnB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;KACrB;IAED,GAAG;;QAEC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAS,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,CAAC;QAC/C,IAAI,MAAM,KAAK,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,WAAW,CAAC;SACjD;aAAM,IAAI,MAAM,KAAK,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YAChF,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,UAAU,CAAC;SAChD;QACD,IAAU,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,KAAK,WAAW,EAAE;YACjD,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;aAAM;YACH,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAC/B;iBAAM;gBACH,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;SACJ;KACJ;IAGD,aAAa;QACT,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,IAC1D,CAAC,CAAC,aAAa,KAAK,mBAAmB;eACpC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAElD,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,IAAI,gBAAgB,EAAE;gBACrE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC;aAC5E;SACJ;aAAM;;YAEH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC;YACxD,IAAG,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,gBAAgB,EAAE;gBACzD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAG,EAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC;aACzE;SACJ;KACJ;IAED,iBAAiB;QACb,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,KAAK,oBAAoB,CAAC,CAAC;QAC/G,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;YACf,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAsB,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;gBACtF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,EAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,EAAC,CAAC,CAAC;aAC/E;SACJ;KACJ;IAED,oBAAoB;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC;QACzE,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;gBACjD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAC,kBAAkB,EAAE,EAAC,MAAM,EAAE,SAAS,EAAC,EAAC,CAAC,CAAA;aAC3E;SACJ;KACJ;CAEJ;;;aCtE4B,SAAQ,IAAI;IAMrC,YAAY,EAAU,EAAE,KAAY;QAChC,KAAK,EAAE,CAAC;QANZ,SAAI,GAAW,SAAS,CAAC;QAOrB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,KAAK,mBAAmB,CAAC,CAAC;KACxG;IAED,GAAG;QACC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YACpD,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;aAAM;YACJ,IAAI,CAAC,aAAa,EAAE,CAAC;SACvB;KACJ;IAED,aAAa;KAEZ;IAED,aAAa;KAEZ;CACJ;;;ACjCM,MAAM,MAAM,GAAG;IAClB,YAAY,EAAE,SAAS;IACvB,KAAK,EAAE,SAAS;CACnB,CAAC;AAEF,AAAO,MAAM,UAAU,GAAG;IACtB,gBAAgB,EAAE;QACd,kBAAkB,EAAE;YAChB,MAAM,EAAE,MAAM,CAAC,YAAY;SAC9B;KACJ;IACD,SAAS,EAAE;QACP,kBAAkB,EAAE;YAChB,MAAM,EAAE,MAAM,CAAC,KAAK;SACvB;KACJ;CACJ,CAAC;;;UCVwB,SAAQ,IAAI;IAMlC,YAAY,EAAU,EAAE,KAAY;QAChC,KAAK,EAAE,CAAC;QANZ,SAAI,GAAW,MAAM,CAAC;QAOlB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;KAChD;IAED,GAAG;QACC,MAAM,MAAM,GAAS,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,CAAC;QAC/C,IAAI,MAAM,KAAK,WAAW,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACnD,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,WAAW,CAAC;YACxC,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,IAAI,CAAC;SAC1C;aAAM,IAAI,MAAM,KAAK,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE;YAClF,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,YAAY,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,IAAI,CAAC;SAC1C;QAED,IAAU,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,KAAK,WAAW,EAAE;YACjD,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;aAAM;YACH,IAAI,CAAC,aAAa,EAAE,CAAC;SACxB;KACJ;IAED,aAAa;;;;;QAKT,MAAM,QAAQ,GAAa,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAE7C,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YAClB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,EAAE;gBAC1D,MAAM,CAAC,MAAM;oBACT,MAAM,SAAS,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;oBACvG,OAAO,SAAS,GAAG,CAAC,CAAC;iBACxB;aACJ,CAAC,CAAC;YAEH,IAAI,MAAM,EAAE;gBACF,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC1D;SACJ;QAED,MAAM,MAAM,GAAW,IAAI,CAAC,aAAa,CAAO,IAAI,CAAC,KAAK,CAAC,MAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC9E,IAAG,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,gBAAgB,EAAE;YACzD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,gBAAgB,CAAC,CAAC;SAC1D;KACJ;IAED,aAAa;QACT,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAClD,MAAM,EAAE,CAAC,IACL,CAAC,CAAC,CAAC,aAAa,KAAK,mBAAmB,IAAI,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,aAAa;oBACxE,CAAC,CAAC,aAAa,KAAK,eAAe,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,cAAc,CAAC;oBACnE,CAAC,CAAC,aAAa,KAAK,mBAAmB,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,cAAc,CAAC;SAClF,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,IAAI,gBAAgB,EAAE;gBACrE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;aACvD;SACJ;aAAM;;YAEH,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,aAAa,KAAK,oBAAoB,CAAC,CAAC;YAC/G,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;gBACf,IAAI,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAsB,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;oBACtF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;iBAC1D;aACJ;SACJ;KACJ;CAEJ;;;ACtFD;AACA;IAQI,OAAO,QAAQ;QACX,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAED,OAAO,cAAc;QACjB,IAAI,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEtC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,IAAU;YACxB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAC7B,CAAC,CAAC;KACN;IAED,OAAO,iBAAiB,CAAC,IAAU;QAG/B,MAAM,GAAG,GAAG,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,aAAa,GAAG,GAAG;aACpB,MAAM,CAAC,CAAC,IAAU,CAAC,CAAC,MAAO,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QAE3D,MAAM,kBAAkB,GAAG,SAAS,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;QACxE,MAAM,cAAc,GAAG,GAAG;aACrB,MAAM,CAAC,CAAC,IAAU,CAAC,CAAC,MAAO,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,MAAM,CAAC;QAE5D,IAAI,kBAAkB,GAAG,SAAS,CAAC,+BAA+B,GAAG,cAAc,EAAE;YACjF,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;SAC1C;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,oBAAoB,GAAG,OAAO;aAC/B,GAAG,CAAC,SAAS,CAAC,qBAAqB,CAAC;aACpC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;aAClB,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;QAExC,IAAI,oBAAoB,GAAG,aAAa,GAAG,OAAO,CAAC,MAAM,EAAE;YACvD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;SACzC;KACJ;IAED,OAAO,qBAAqB,CAAC,IAAU;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;KAChD;IAED,OAAO,qBAAqB,CAAC,MAAc;QACvC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE;YAC9B,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACvB,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC;;YAGjC,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC;;;;gBAI1C,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACrB,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;gBACjC,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC;aACtD,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,MAAM,CAAC,CAAC,MAAM,CAAC;YAEpC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG;gBAC1B,MAAM,EAAE,EAAE;gBACV,MAAM;aACT,CAAC;SACL;QACD,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KACtC;IAED,OAAO,cAAc,CAAC,IAAU;QAC5B,IAAI,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAExC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,KAAY;YAC3B,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC1B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;gBAC1B,KAAK,CAAC,MAAO,CAAC,IAAI,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;aAChE;YAED,QAAc,KAAK,CAAC,MAAO,CAAC,IAAI;gBAC5B,KAAK,QAAQ;oBACT,SAAS,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;oBACvC,MAAM;gBACV,KAAK,QAAQ;oBACT,SAAS,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;oBACpC,MAAM;gBACV,KAAK,SAAS;oBACV,SAAS,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC;oBACrC,MAAM;aACb;SACJ,CAAC,CAAC;KACN;IAED,OAAO,eAAe,CAAC,IAAU;QAC7B,OAAiB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC;KACpF;IAWD,OAAO,qBAAqB,CAAC,KAAY;QACrC,IAAI,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,GAAQ,EAAE,GAAG;YAC5C,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzC,OAAO,GAAG,CAAC;SACd,EAAE,EAAE,CAAC,CAAC;QACP,OAAO,MAAM,CAAC,KAAK,CAAC;QACpB,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAS,CAAC,EAAC,CAAC,IAAE,OAAO,MAAM,CAAC,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,CAAC,CAAA,EAAC,CAAC,CAAC;QACrF,OAAa,IAAI,CAAC,OAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7C;IAOD,OAAO,gBAAgB,CAAC,IAAY,EAAE,IAAU;QAC5C,MAAM,KAAK,GAAS,IAAI,CAAC,OAAQ,CAAC,IAAI,CAAC,CAAC;QACxC,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;aACpC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9E,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,GAAC,IAAI,IAAI,EAAE,CAAC,kBAAkB,EAAE,EAAE,EAAC,MAAM,EAAE,EAAC,IAAI,EAAE,IAAI,EAAC,EAAC,CAAC,CAAC;SAC3F;KACJ;;AA/BM,iBAAO,GAAG;IACb,OAAO,EAAE,QAAQ;IACjB,MAAM,EAAE,SAAS;IACjB,MAAM,EAAE,QAAQ;IAChB,QAAQ,EAAE,SAAS;IACnB,eAAe,EAAE,SAAS;IAC1B,MAAM,EAAE,OAAO;CAClB,CAAC;AAYK,iBAAO,GAAG;IACb,QAAQ,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;IAC9B,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;IAC9B,QAAQ,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC;CAChC,CAAC;;;IC1HG,OAAO,IAAI;QACd,OAAM,SAAS,CAAC,QAAQ,EAAE;eACjB,IAAI,CAAC,YAAY,EAAE,EAAE;YAC1B,SAAS,CAAC,OAAO,EAAE,CAAC;SACvB;KACJ;IAEO,OAAO,YAAY;QACvB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;QAChC,QAAQ,QAAQ,IAAI,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,GAAG,OAAO,EAAE;KAC/E;CACF;;;AChBD;;AAEA,AAGA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AAE7C,AAAO,MAAM,IAAI,GAAG;IAClB,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;;IAGjD,IAAI,IAAI,CAAC,IAAI,GAAG,EAAE,KAAK,CAAC,EAAE;QACxB,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;KACvB;;IAGD,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE;QAChC,IAAI,EAAE,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YAC1B,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC5B;KACF;IAED,SAAS,CAAC,cAAc,EAAE,CAAC;IAC3B,MAAM,CAAC,IAAI,EAAE,CAAC;CACf,CAAC;;;;;"};